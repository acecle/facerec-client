{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","menuButton","marginRight","spacing","hide","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","Home","Page2","Page3","App","classes","React","useState","open","setOpen","className","basename","process","AppBar","position","clsx","Toolbar","IconButton","edge","onClick","color","aria-label","Typography","variant","noWrap","Drawer","anchor","paper","Divider","List","ListItem","button","component","Link","to","ListItemIcon","ListItemText","primary","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af65831a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Typography from '@material-ui/core/Typography';\nimport { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth, \n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: 0,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: drawerWidth,\n  },\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n      setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n      setOpen(false);\n  };\n\n  return (\n    <div className=\"root\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <AppBar position=\"fixed\" className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n        })}>\n            <Toolbar>\n            <IconButton edge=\"start\" className={clsx(classes.menuButton, open && classes.hide)} onClick={handleDrawerOpen} color=\"inherit\" aria-label=\"menu\">\n                <MenuIcon/>\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n                Project\n            </Typography>\n            </Toolbar>\n        </AppBar>\n\n        <Drawer className={classes.drawer} variant=\"persistent\" anchor=\"left\" open={open} classes={{paper: classes.drawerPaper,}}>\n            <div className={classes.drawerHeader}>\n            <IconButton onClick={handleDrawerClose}>\n                <ChevronLeftIcon />\n            </IconButton>\n            </div>\n            <Divider />\n            <List>\n              <ListItem button component={Link} to=\"/\">\n                <ListItemIcon><InboxIcon/></ListItemIcon>\n                <ListItemText primary=\"Home\"/>\n              </ListItem>\n              <ListItem button component={Link} to=\"/page2\">\n                <ListItemIcon><InboxIcon/></ListItemIcon>\n                <ListItemText primary=\"Page2\"/>\n              </ListItem>\n              <ListItem button component={Link} to=\"/page3\">\n                <ListItemIcon><InboxIcon/></ListItemIcon>\n                <ListItemText primary=\"Page3\"/>\n              </ListItem>\n            </List>\n        </Drawer>\n\n        <main className={clsx(classes.content, {\n            [classes.contentShift]: open,\n        })}>\n            <div className={classes.drawerHeader}/>\n            <div> {/* CONTENT PAGES HERE */}\n              <Switch>\n                <Route exact path=\"/\">\n                  <Home/>\n                </Route>\n                <Route path=\"/page2\">\n                  <Page2/>\n                </Route>\n                <Route path=\"/page3\">\n                  <Page3/>\n                </Route>\n              </Switch>\n            </div>\n            \n        </main>\n      </Router>\n    </div>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>home</div>\n  );\n}\n\nfunction Page2() {\n  return (\n    <div>page 2</div>\n  );\n}\n\nfunction Page3() {\n  return (\n    <div>page 3</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}